name: Build and Test

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    runs-on: ubuntu-latest

    # Step to cache dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache dependencies using actions/cache
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Set up Python and install Poetry
      - name: Set up Python and Poetry
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      # Install dependencies
      - name: Install dependencies
        run: |
          poetry install --no-interaction

      # Parallelize linting and testing steps
      - name: Run linting and tests
        run: |
          poetry run pylint src/ &
          poetry run pytest &
          wait

  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Build Docker image
      - name: Build Docker image
        run: |
          docker compose build

  test-docker:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Run Docker container
      - name: Run Docker container
        run: |
          docker compose up -d

  check-status:
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker, test-docker]
    steps:
      - name: Check build status
        if: ${{ failure() }}
        run: |
          echo "Build failed, stopping push..."
          exit 1
